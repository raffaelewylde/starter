-- Name: elflord
-- Author: original author Ron Aaron <ron@ronware.org>
-- Maintainer: original maintainer Ron Aaron <ron@ronware.org>
-- Website: https://www.github.com/vim/colorschemes
-- License: Same as Vim
-- Last Change: 2024 Aug 15

-- Generated by Colortemplate v2.2.3

vim.o.background = "dark"

-- vim.cmd('hi clear')
vim.cmd("source " .. vim.env.VIMRUNTIME .. "/colors/vim.lua") -- Nvim: revert to Vim default color scheme
vim.g.colors_name = "elflord"

local t_Co = vim.o.t_Co

vim.api.nvim_set_hl(0, "Terminal", { link = "Normal" })
vim.api.nvim_set_hl(0, "Boolean", { link = "Constant" })
vim.api.nvim_set_hl(0, "Character", { link = "Constant" })
vim.api.nvim_set_hl(0, "Conditional", { link = "Repeat" })
vim.api.nvim_set_hl(0, "Debug", { link = "Special" })
vim.api.nvim_set_hl(0, "Define", { link = "PreProc" })
vim.api.nvim_set_hl(0, "Delimiter", { link = "Special" })
vim.api.nvim_set_hl(0, "Exception", { link = "Statement" })
vim.api.nvim_set_hl(0, "Float", { link = "Number" })
vim.api.nvim_set_hl(0, "Include", { link = "PreProc" })
vim.api.nvim_set_hl(0, "Keyword", { link = "Statement" })
vim.api.nvim_set_hl(0, "Label", { link = "Statement" })
vim.api.nvim_set_hl(0, "Macro", { link = "PreProc" })
vim.api.nvim_set_hl(0, "Number", { link = "Constant" })
vim.api.nvim_set_hl(0, "PopupSelected", { link = "PmenuSel" })
vim.api.nvim_set_hl(0, "PreCondit", { link = "PreProc" })
vim.api.nvim_set_hl(0, "SpecialChar", { link = "Special" })
vim.api.nvim_set_hl(0, "SpecialComment", { link = "Special" })
vim.api.nvim_set_hl(0, "StatusLineTerm", { link = "StatusLine" })
vim.api.nvim_set_hl(0, "StatusLineTermNC", { link = "StatusLineNC" })
vim.api.nvim_set_hl(0, "StorageClass", { link = "Type" })
vim.api.nvim_set_hl(0, "String", { link = "Constant" })
vim.api.nvim_set_hl(0, "Structure", { link = "Type" })
vim.api.nvim_set_hl(0, "Tag", { link = "Special" })
vim.api.nvim_set_hl(0, "Typedef", { link = "Type" })
vim.api.nvim_set_hl(0, "lCursor", { link = "Cursor" })
vim.api.nvim_set_hl(0, "CurSearch", { link = "Search" })
vim.api.nvim_set_hl(0, "CursorLineFold", { link = "CursorLine" })
vim.api.nvim_set_hl(0, "CursorLineSign", { link = "CursorLine" })
vim.api.nvim_set_hl(0, "MessageWindow", { link = "Pmenu" })
vim.api.nvim_set_hl(0, "PopupNotification", { link = "Todo" })

if (vim.fn.has("termguicolors") == 1 and vim.o.termguicolors) or vim.fn.has("gui_running") == 1 then
  local terminal_ansi_colors = {
    "#000000",
    "#cd0000",
    "#00cd00",
    "#cdcd00",
    "#0000ee",
    "#cd00cd",
    "#00cdcd",
    "#e5e5e5",
    "#7f7f7f",
    "#ff0000",
    "#00ff00",
    "#ffff00",
    "#5c5cff",
    "#ff00ff",
    "#00ffff",
    "#ffffff",
  }
  for i, color in ipairs(terminal_ansi_colors) do
    vim.g["terminal_color_" .. (i - 1)] = color
  end
end

vim.api.nvim_set_hl(0, "Normal", { guifg = "#00ffff", guibg = "#000000", gui = "NONE", cterm = "NONE" })
vim.api.nvim_set_hl(0, "QuickFixLine", { guifg = "#ffffff", guibg = "#2e8b57", gui = "NONE", cterm = "NONE" })
vim.api.nvim_set_hl(0, "ColorColumn", { guifg = "NONE", guibg = "#cd0000", gui = "NONE", cterm = "NONE" })
-- Continue with all other highlights similarly as needed...

if t_Co >= 256 then
  vim.api.nvim_set_hl(0, "Normal", { ctermfg = 51, ctermbg = 16, cterm = "NONE" })
  vim.api.nvim_set_hl(0, "QuickFixLine", { ctermfg = 231, ctermbg = 29, cterm = "NONE" })
  -- Continue setting highlights for 256 colors...
end

if t_Co >= 16 then
  vim.api.nvim_set_hl(0, "Normal", { ctermfg = "cyan", ctermbg = "black", cterm = "NONE" })
  vim.api.nvim_set_hl(0, "QuickFixLine", { ctermfg = "white", ctermbg = "darkgreen", cterm = "NONE" })
  -- Continue setting highlights for 16 colors...
end
